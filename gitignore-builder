#!/usr/bin/env python
import argparse
import requests
import collections
import json
import datetime
import logging

logging.basicConfig(format='%(message)s')

class GitIgnoreBuilder:
	logger = logging.getLogger(__name__)
	logger.setLevel(logging.INFO)
	output_file = '.gitignore'

	urls = [
		'https://raw.githubusercontent.com/github/gitignore/master/{}.gitignore',
		'https://raw.githubusercontent.com/github/gitignore/master/Global/{}.gitignore'
	]

	def __init__(self, update, ignores=[], verbose=False):
		if verbose:
			self.logger.setLevel(logging.DEBUG)
		self.logger.debug('update={}, ignores={}'.format(update, ', '.join(ignores)))

		self.update = update
		self.ignores = ignores
		self.result_status = collections.deque()
		self.result_text = collections.deque()

	def search(self):
		for ignore in self.ignores:
			self.logger.debug('looking for {}'.format(ignore))
			found = False
			for url in self.urls:
				request_url = url.format(ignore)
				self.logger.debug('checking url {}'.format(request_url))
				response = requests.get(request_url)
				if response.status_code == 200:
					self.logger.info('found gitignore file for {}'.format(ignore))
					self.result_status.append('# SUCCESS: {} - {}'.format(ignore, request_url))
					self.result_text.append('### {} begin'.format(ignore))
					self.result_text.append(response.text)
					self.result_text.append('### {} end'.format(ignore))
					found = True
					break
			if not found:
				self.logger.warning('unable to find gitignore file for {}'.format(ignore))
				self.result_status.append('# FAILURE: {}'.format(ignore))

	def update_existing(self):
		self.logger.debug('updating existing gitignore file')
		with open(self.output_file, 'r') as gitignore:
			last_run = json.loads(gitignore.readline()[1:])
			self.ignores = last_run['ignores']
			self.logger.info('will attempt to update the following gitignores: {}'.format(', '.join(self.ignores)))

	def write_results(self):
		status = {
			'updated' : str(datetime.datetime.now()),
			'ignores' : self.ignores
		}

		self.logger.debug('writing results to {}'.format(self.output_file))
		with open(self.output_file, 'w') as output:
			output.write('# {}\n'.format(json.dumps(status)))

			for status in self.result_status:
				output.write(status + '\n')

			output.write('\n')

			for text in self.result_text:
				output.write(text + '\n')

	def run(self):
		if self.update:
			if len(self.ignores) > 0:
				self.logger.warn('the specified ignores ({}) will not be used as the update flag was set'.format(', '.join(self.ignores)))
			self.update_existing()
		self.search()
		self.write_results()
		self.logger.info('done')

if __name__ == '__main__':
	parser = argparse.ArgumentParser(description='combines multiple gitignore files together into a single file')
	parser.add_argument('-u', '--update', action='store_true', help='update the existing .gitignore file')
	parser.add_argument('ignores', nargs='*', help='gitignore file to fetch')
	parser.add_argument('-v', '--verbose', action='store_true', help='verbose output for debugging')

	args = parser.parse_args()
	GitIgnoreBuilder(**vars(args)).run()
